h2. Концепция MutApp приложения
- Редактирование приложения растянуто во времени: создвать изменять и сохранять, не модифицируя код
- Наличие функциональной обертки для свойств
- Постоянный адрес свойства, например id=pm quiz.0.question.text, а не только сессионный случайный id
- Возможность сериализировать вовне и установить свойства извне

h2. Схема структуры MutAppSchema
- Чтобы не было свойств-зомби
- проверка, чтобы не создавать неописанные свойства
- Не объявлять лишние свойства propertyString в конструкторе MutAppProperty
- Общие свойства можно вынести: label, prototypes ...
- определить приоритет: у потомков приоритет выше чем у родителей, если приходят конфликтные значения из сериализации
- Не объявлять модель? апп?
- Чтобы не было потерянных свойств, которые не в списке _mutAppProperties и без схемы
00 в момент проверки по схеме свойства в модели еще нет, оно в процессе создания
    000 тогда propertyString все такми передавать параметром в каждое свойство при создании

    h3. Селекторы свойств.
    Ключом в схеме является селектор. Он похож на propertyString. Но селектор может задавать сразу несколько свойств для удобства.
    Примеры:
        "id=pm quiz" - когда, селектор и propertyString идентичны
        "id=pm quiz.{{number}}.question.text" - для массива
        "id=startScr startHeaderText, id=startScr startDescription, id=startScr startButtonText" - группировка нескольких свойств в одном селекторе
    Причем один селектор может быть составной и индивидуальный одновременно
    "id=startScr startHeaderText, id=startScr startDescription, id=startScr startButtonText": {}
    "id=startScr startDescription": {}

h2. Тесты
- Стандартная проверка при создании: что свойство не описано в схеме
- Не должно быть MutAppProperty без application. В режиме мониторинга (monitor=true) проверять это по таймеру внутри приложения. Подойдет для автотестов
- Проверка что некоторые ноды MutAppSchema так и не были задействованы за довольно долгое время работы приложения.
- Проверка, что в приложении нет зомби-MutAppProperty
    свойство само проверяет что его нет в _mutappProperties - аларм
    что никто не запрашивает его getValue() - аларм
        таймштамп


h2. Допущения:
 - MutAppProperty может быть только в MutApp.Model, либо в MutApp.Screen
 - У каждой MutApp.Model есть application
 - У каждого MutApp.Screen есть MutApp.Model
На этих допущениях происходит связка приложения со свойствами


h2. MutAppProperty constructor params

model:
модель MutApp.Model, нужна для вызова событий типа change в MutApp.Model при смене значения свойства, чтобы например рендерить экран.
Если свойство создается в defaults MutApp.Model, то свойство будет слинковано с моделью позже - внутри конструктора MutApp.Model
Если вы создаете MutAppProperty позже, в произвольный момент времени, то передавайте model вручную в конструктор

propertyName:
MutAppProperty должно значать для вызова событий, какое имя оно имеет

propertyString:
Пример: "id=startScr startDescription"
Указывает на адрес свойства, Необходимо указать для редактирования

application:
передача ссылки на приложение устанавливает связь с ним
Этот параметр вы не сможете передать когда свойство создается раньше модели, например, в defaults. В таком случае линковка будет сделана автоматом в конструкторе модели

model:
передача ссылки на модель устанавливает связь с ней.
Аналогично application


h2. MutAppPropertyArray constructor params

prototypes:
Ссылки на функции в формате 'id=pm quizProto1' которые создадут и вернут новые элементы для вставки в массив
Создавая новые элементы для массива извне, редактор должен иметь четкие источники (фабрики) производства новых элементов.
Новые элементы должны производиться со всеми необходимыми свойствами, заполненными по умолчанию.
Функция будет вызвана в контексте entity где она объявлена: приложение, модель, экран. Объявление прототипной функции в дочерних объектах не тестировалось

h2. CssMutAppProperty constructor params

То что это именно CssMutAppProperty свойство будет определено по формату селектора в схеме
Селектор схемы выглядит так, пример ".js-start_header fontSize"
Поддерживаются только классы на данный момент.
Важно: после каждого render() в экране надо вызывать апдейт application.updateCssMutAppPropertiesValues()

h2. MutApp

_mutappProperties список всех MutAppProperty свойств приложения.
Они попадают в initialize модели и вью.
Либо, если свойства _mutappProperties создаются runtime, то указывать приложение нужно самостоятельно в конструкторе.
Параметры: application, model - если свойство принуждежит модели

h2. MutAppModel
Наследована от Backbone.Model
Важно: MutAppProperty не надо создавать в defaults. Иначе ссылка будет сохранена в классе (например PersonalityModel), то есть в объекте прототипе.
И сколько бы вы интансов модели не создавали, свойство будет общее.
Другими словами: как только появился контекст this модели там и создаем.
В initialize лучше создавать MutAppProperty