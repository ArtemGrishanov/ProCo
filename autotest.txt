=== Добавить в задачи === :

Изучить решения с минификацией.
	Хочется локально оставить раздельные файлы
	И не переписывать подключение скриптов
	Если сделать один файл, то:
		локально пересобирать без минификации

Деплой поправить папочку /pub
./build.sh -r // release deploy
./build.sh -t // test deploy
	gulp build
	cd build
	s3cmd sync ...
	cd ..
./build.sh -d // dev deploy without build
	surge
	хорошо бы менять кофигурация gulp-ом в configurationSetsOnStart (config.js) 
./build.sh // просто собрать all.js локально
	

В скрипте перед деплоем на прод надо делать бекап данных. Это возможно с утилитой скорее всего.
Бекап оставлять там же оставлять в s3

вынести в конфигурацию config.js
awsBucketName: 'proconstructor'
для дева новый бакет. Для теста и прода - единый бакет.

storefront.html зашиты ссылки на шаблоны
строить витрину динамически из конфига, только так?

Добавить визор в код яндекс метрики.

Для запуска тестов что надо на деве?
	просто открыть autotest/index.html ?

SCENARIO_HAPPY_PATH
шаблон загрузился и формально исправен +
В движке все хорошо создалось
	апп проперти двух типов
	количество их примерно верное
	количество экранов примерно верное
отобразился в редакторе корректно
	в контейнере появился айфрейм
	появились слайды соответствующие количеству экранов
контролы все создались
	выделение всех элементов приводит к созданию и фильтрации контролов
контролы управляют настройками верно
изменения в шаблоне можно сохранить
после редактирования проекта в режиме превью он отображается верно
после публикации все отображается верно

===

Тестирование со стороны слоев:
1. Уровень интерактивного приложения.
Тестирование приложения как отдельного проекта, независимо от технологии.
- LAYER1_APP интерфейс уровня.
	Можно создать интерактивное приложение и протестировать его.

2. Тестирование движка.
Включает внутри использование уровня LAYER1_APP
- LAYER2_APP
	Можно загрузить приложение в движок и протестировать его. С шаблоном или без.

3. Тестирование редактора
Включает CHECK_APP и CHECK_ENGINE_STATE
- CHECK_CONTROLS
- CHECK_SLIDES
- CHECK_PREVIEW

4. Верхний уровень (сценарии)
- SCENARIO_HAPPY_PATH_1
...



Нужем минимальный джентельменский набор:
	загрузка сохранение публикация
	базовая работа с апп проперти
	какие по факту имеет стили элементы

Проверять в двух местах: в проекте на самом деле, в превью экранов ?
Проверять картинки шаблонов до и после?

1. Проверять что прежние шаблоны работают
	// idea Это сравнение попиксельное экранов шаблона после открытия
	Pre:
		engine
		templatecollection
	var TemplateSet
	templatecollection.load
	TestOperations.checkAllAppProperties()	

2. Проверять что операции редактирования работают.
	for
	{
		TestOperation.randomValues
		TestOperation.checkAllAppProperties()
		// TestOperation.checkAllEditorControls()
	}
== группа платформа ===
проверки таких типов:
	-проверка css стилей (actual-expected).
		фоновая картинка слетела у экрана
		фоновая картинка не та у экрана
		ставлю паддинг а он не работает
		слетело форматирование текста
			Это вроде легко, сформировать проверку на основе css appProperty
			
		текст был многострочный, стал однострочный после каких-то манипуляций.
			тут пока не понятно
			просто проверять текст на равенство до и после?
			
		
html элемент сместился относитьельно ожидаемого места
	?

количество результатов не соответствует ожидаемому
	то есть промо проект создает ожидаемое количество экранов

после манипуляций с экранами проверить что все хорошо
	количество экранов показываемое при выборе активного экрана
	что все группы есть

== группа триггеры ===
верный ответ не отображается
не удается сменить верный ответ через триггер
нет подсказки по установке верного ответа


== группа сериализация ==
шаблон не сохраняется
не удается открыть шаблон
проект не публикуется
ерроры в консоли при загрузке шаблона


