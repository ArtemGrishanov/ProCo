Сохранение работы пользователя (Ctrl+S)
Достаточно сохранить app+descriptor. Потом app+desc можно будет открыть на редактирование. Для пользователя это выглядит как работа над проектом.
Можно сделать "Сохранить как..."

Шаблон
Шаблон это измененные app+css+descriptor (свойства editable). Любую работу пользователя можно назвать "шаблоном".
app+css+descriptor хранятся в простом текстовом файле в виде json, плюс ид промо-проекта (тест, таймлайн и тд).
В редакторе в профи-режиме есть возможность редактировать descriptor.
Никакой кнопки "Сохранить шаблон" нет. Разработчик шаблонов просто копирует ссылки из "Мои Проекты" на витрину.

Витрина
Витрина содержит множество шаблонов, из которых пользователь может сделать свой продукт.

Публикация
Сохраняется всё приложение целиком (код проекта, app+descriptor, копируются ресурсы).
Таким образом дальнейшие изменения приложение или контента не повлияют на продукт.

Ресурсы
Загружаются в каталог проекта. Для каждого проекта ресурсы индивидуальные. И доступны всем по прямой ссылке.
Но теоритически ресы других продуктов/пользователей тоже доступны.
При публикации ресурсы копируются, чтобы зафиксировать текущее состояние продукта.

Версионирование?
Возможные изменения:
 - Добавились новые свойства в app
 - Добавились новые экраны
Как обеспечить обратную совместимость сохраненных/опубликованных продуктов?

Дескриптор
Селекторы.
Описание нескольких свойств сразу (по сути шаблон). {{number}} - это констранта обозначающая целое число.
"quiz.{{number}}.options.{{number}}.text"

Добавление нового AppProperty
В объекте app приложения добавляем свойство
Добавляем в descriptor конфигурацию свойства. Возможно потребуется добавить новый контрол.
Добавляем атрибут data-app-property для того html элемента с которым хотим логически свать это свойство.

Добавление нового конрола
config
подключить новый js файл

Добавление нового вью для контрола
-

Требования к промо проектам
Паддинги и маргины всех элементов должны быть сброшены в 0. Чтобы не конфликтовать с настройками.

Экраны.
    Любой промо проект логически разбит на экраны. Это понятно пользователям. Взаимодействие в редакторе происходит с экранами.
    Пользователь видит и четко понимает сколько у него экранов.
    К каждому экрану могут быть присоединены данные. Эти данные потом можно использовать. Например в триггерах.

Плохо:
<div class="q_wr __photo" data-app-property="quizQuestionTextAlign quiz.{{currentQuestion}}.text">
<span data-app-property="">{{question_text}}</span>
</div>
Как надо:
<div class="q_wr __photo" data-app-property="quizQuestionTextAlign quiz.{{currentQuestion}}.text">
{{question_text}}
</div>

Содержимое с контейнером для выравнивания:
<div class="js-photo_cnt"><div class="photo_wr js-photo" data-app-property="quiz.{{currentQuestion}}.img"></div></div>
Дескриптор:
{
    selector: '.js-photo_cnt',
    rules: 'textAlign'
},
{
    selector: '.js-photo',
    rules: 'marginTop marginBottom'
}