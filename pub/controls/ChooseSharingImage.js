/**
 * Created by artyom.grishanov on 02.09.16.
 *
 * Выбор картинки.
 * Кнопка сбоку на панели контролов, которая открывает окно resourceManager
 */
function ChooseSharingImage(param) {
    this.init(param);
    this.imageUrl = '';

    shareImageService.addAppPreviewCanvasChangeCallback(this.updatePreview.bind(this));

    this.$directive.click(this.onDirectiveClick.bind(this));
}
_.extend(ChooseSharingImage.prototype, AbstractControl);

ChooseSharingImage.prototype.getValue = function() {
    return this.imageUrl;
};

ChooseSharingImage.prototype.setValue = function(value) {
    this.imageUrl = value;
};

ChooseSharingImage.prototype.destroy = function() {
    this.$directive.remove();
};

ChooseSharingImage.prototype.onShow = function() {
    this.updatePreview();
};

/**
 * Клик по контролу: открытие леера предпросмотра
 */
ChooseSharingImage.prototype.onDirectiveClick = function() {
    if (App.getAWSBucket() !== null) {
        // не приумал как отказаться от использования прямого обращения к app, но кастомные контролы так делают
        var app = Editor.getEditedApp();
        var entityId = this.getEntityId(this.propertyString);
        if (entityId) {
            var imageProperty = app.getProperty(this.propertyString);
            if (imageProperty) {
                Modal.showPreviewShareImage({
                    entityId: entityId,
                    image: imageProperty.getValue(),
                    callback: this.showPreviewShareImageCallback.bind(this),
                    resultLabel: ''
                });
            }
            else {
                throw new Error('ChooseSharingImage.onDirectiveClick: can not find property for propertyString \''+this.propertyString+'\'');
            }
        }
        else {
            throw new Error('ChooseSharingImage.onDirectiveClick: can not find sharing entity id for propertyString \''+this.propertyString+'\'');
        }
    }
    else {
        Modal.showSignin();
    }
};

/**
 * Установить мини-превью картинки прямо в контроле
 *
 * Здесь мы не заботимся об актуальности канваса. Просто запрашиваем последний созданный.
 * Это метод будет вызываться слишком часто (при его показе) чтобы генерировать актуальные канвасы.
 * Если пользователь откроет модалку previewShareImageModal, то там будет запущена генерации
 */
ChooseSharingImage.prototype.updatePreview = function() {
    if (shareImageService.isCustomUrl(this.imageUrl) === true) {
        this.$directive.find('.js-img').css('background-image', 'url('+this.imageUrl+')');
    }
    else {
        var canvas = shareImageService.getAppAutoPreviewCanvas();
        if (canvas) {
            this.$directive.find('.js-img').css('background-image', 'url('+canvas.toDataURL()+')');
        }
        else {
            shareImageService.generateAppAutoPreviewCanvas({
                app: Editor.getEditedApp()
                // callback не нужен, так как изменения приходят через shareImageService.addAppPreviewCanvasChangeCallback
            });
        }
    }
};

/**
 * Получить ид публикации на основании propertyString картинки для этой публикации
 * Нужно, так как леер для превью и выбора картинок публикации работает с entityId, а контролы с propertyString
 *
 * @param {string} imgUrlPropertyString, example: 'appConstructor=mutapp shareEntities.1234abc.imgUrl'
 *
 * @return {string}
 */
ChooseSharingImage.prototype.getEntityId = function(imgUrlPropertyString) {
    var app = Editor.getEditedApp();
    var shareEntitiesArr = app.shareEntities.toArray();
    for (var i = 0; i < shareEntitiesArr.length; i++) {
        var e = shareEntitiesArr[i];
        if (imgUrlPropertyString === e.imgUrl.propertyString) {
            return e.id;
        }
    }
    return null;
};

/**
 * Колбек в работе леера previewShareImageModal
 *
 * @param {string} url - url(custom url) || null(if autogenerated)
 */
ChooseSharingImage.prototype.showPreviewShareImageCallback = function(url) {
    this.imageUrl = url;
    this.updatePreview();
    this.controlEventCallback(ControlManager.EVENT_CHANGE_VALUE, this);
};

